SRCLK EQU P3.6
RCLK EQU P3.5
SER EQU P3.4
LED EQU P0
DAT1 EQU R6
	
MOV LED, #7FH
MOV DPTR, #4BH
MAIN_LOOP:

	MOV R0, #0
	MOV R1, #8
	
	LOOP0:
	
	MOV A, R1
	MOVC A, @A+DPTR
	MOV LED, A
	INC R1
	CJNE R1, #16, CONTINUE1
	JMP END_LOOP
	CONTINUE1:	; Otherwise continue

	MOV A, R0
	MOVC A, @A+DPTR
	MOV DAT1, A
	ACALL SEND_BYTE
	INC R0
	CJNE R0, #9, CONTINUE2
	JMP END_LOOP
	CONTINUE2:	; Otherwise continue	
	
	ACALL DELAY
	MOV DAT1, #00H
	ACALL SEND_BYTE
	
	JMP LOOP0
	
END_LOOP:
JMP MAIN_LOOP


SEND_BYTE:

	CLR SRCLK
	CLR RCLK

	MOV A, DAT1
	MOV R5, #8		; Loop counter
	LOOP1:
		RLC A
		MOV SER, C
		SETB SRCLK
		NOP
		NOP
		CLR SRCLK
	DJNZ R5, LOOP1

		SETB RCLK
		NOP
		NOP
		CLR RCLK

RET		; SEND_BYTE RETURN
	
DELAY:	

	HERE1:	MOV R3, #4
	HERE2:	MOV R4, #255
	HERE3:	DJNZ R4, HERE3
			DJNZ R3, HERE2

		
RET		; DELAY RET

	DB 00H, 00H, 3EH, 41H, 41H, 41H, 3EH, 00H,	 7FH, 0BFH, 0DFH, 0EFH, 0F7H, 0FBH, 0FDH, 0FEH	; Display 0
	;0	  1    2    3    4    5    6    7   |  8     9    10    11    12    13    14    15
	; For the SEND_BYTE (Array position)	|  For the LED

END
	

