SRCLK EQU P3.6
RCLK EQU P3.5
SER EQU P3.4
LED EQU P0
DAT1 EQU R6
	
MOV LED, #7FH

MAIN_LOOP:

MOV R7, #20H

K:
MOV DPTR, #95H
MOV R1, #20H
ACALL MOVER
ACALL DELAY
DJNZ R7, K

MOV R7, #20H

E1:
MOV DPTR, #9DH
MOV R1, #18H
ACALL MOVER
ACALL DELAY
DJNZ R7, E1

MOV R7, #20H
 
A1:
MOV DPTR, #0A5H
MOV R1, #10H
ACALL MOVER
ACALL DELAY
DJNZ R7, A1

MOV R7, #20H
 
N:
MOV DPTR, #0ADH
MOV R1, #8H
ACALL MOVER
ACALL DELAY
DJNZ R7, N

MOV R7, #20H

E2:
MOV DPTR, #9DH
MOV R1, #18H
ACALL MOVER
ACALL DELAY
DJNZ R7, E2

JMP MAIN_LOOP

MOVER:

	MOV R0, #0
	
	LOOP0:
	
	MOV A, R1
	MOVC A, @A+DPTR
	MOV LED, A
	INC R1
	CJNE R1, #16, CONTINUE1
	JMP END_LOOP
	CONTINUE1:	; Otherwise continue

	MOV A, R0
	MOVC A, @A+DPTR
	MOV DAT1, A
	ACALL SEND_BYTE
	INC R0
	CJNE R0, #9, CONTINUE2
	JMP END_LOOP
	CONTINUE2:	; Otherwise continue	
	
	ACALL DELAY
	MOV DAT1, #00H
	ACALL SEND_BYTE
	
	JMP LOOP0
	
END_LOOP:
RET				; MOVER RETURN

SEND_BYTE:

	CLR SRCLK
	CLR RCLK

	MOV A, DAT1
	MOV R5, #8		; Loop counter
	LOOP1:
		RLC A
		MOV SER, C
		SETB SRCLK
		NOP
		NOP
		CLR SRCLK
	DJNZ R5, LOOP1

		SETB RCLK
		NOP
		NOP
		CLR RCLK

RET		; SEND_BYTE RETURN
	
DELAY:	

	HERE1:	MOV R3, #4
	HERE2:	MOV R4, #255
	HERE3:	DJNZ R4, HERE3
			DJNZ R3, HERE2
		
RET		; DELAY RET

DELAY1:

		MOV R1, #4
HERE4:	MOV R3, #255
HERE5:	MOV R4, #255
HERE6:	DJNZ R4, HERE6
		DJNZ R3, HERE5
		DJNZ R1, HERE4
		
RET		; DELAY 1 RET

	DB 00H, 0FFH, 18H, 24H, 42H, 81H, 00H, 00H ; Display K
	DB 00H, 0FFH, 91H, 91H, 91H, 91H, 91H, 00H	; Display E
	DB 00H, 7FH, 90H, 90H, 90H, 90H, 7FH, 00H	; Display A
	DB 00H, 0FFH, 40H, 30H, 0CH, 02H, 0FFH, 00H	; Display N
		
	DB 7FH, 0BFH, 0DFH, 0EFH, 0F7H, 0FBH, 0FDH, 0FEH ; Led selector

END
	

